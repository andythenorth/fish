<tal:call_global_template define="global_template load: global_template.pt" metal:use-macro="global_template" />

// -- begin ${vehicle.title} -- <!--! this adds a comment to aid reading the final nml -->

// handle graphics
<tal:build_graphics define="states python:{'not_moving': 0 ,'moving': 600};
                            x_y_crops python:('28, 89', '113, 66', '138, 48', '113, 66')"
                    repeat="state states">
    <tal:build_state define="y_start python:states[state]">
        spriteset(${vehicle.id}_ss_not_loaded_${state}, "src/graphics/${vehicle.id}.png") {
            [20,  ${y_start + 10}, ${x_y_crops[0]},  -13,  -6]
            [60,  ${y_start + 10}, ${x_y_crops[1]}, -124,   5]
            [186, ${y_start + 10}, ${x_y_crops[2]}, -124, -28]
            [328, ${y_start + 10}, ${x_y_crops[3]},  -76, -37]
            [454, ${y_start + 10}, ${x_y_crops[0]},  -14, -76]
            [494, ${y_start + 10}, ${x_y_crops[1]},  -34, -38]
            [620, ${y_start + 10}, ${x_y_crops[2]},  -15, -28]
            [762, ${y_start + 10}, ${x_y_crops[3]},   15,   6]
        }
        spriteset(${vehicle.id}_ss_load_1_${state}, "src/graphics/${vehicle.id}.png") {
            [20,  ${y_start + 110}, ${x_y_crops[0]},  -13, -14]
            [60,  ${y_start + 110}, ${x_y_crops[1]}, -118,   1]
            [186, ${y_start + 110}, ${x_y_crops[2]}, -112, -28]
            [328, ${y_start + 110}, ${x_y_crops[3]},  -64, -32]
            [454, ${y_start + 110}, ${x_y_crops[0]},  -14, -65]
            [494, ${y_start + 110}, ${x_y_crops[1]},  -45, -32]
            [620, ${y_start + 110}, ${x_y_crops[2]},  -26, -28]
            [762, ${y_start + 110}, ${x_y_crops[3]},    2,   0]
        }
        spriteset(${vehicle.id}_ss_load_2_${state}, "src/graphics/${vehicle.id}.png") {
            [20,  ${y_start + 210}, ${x_y_crops[0]},  -13, -21]
            [60,  ${y_start + 210}, ${x_y_crops[1]}, -107,  -4]
            [186, ${y_start + 210}, ${x_y_crops[2]}, -100, -28]
            [328, ${y_start + 210}, ${x_y_crops[3]},  -59, -30]
            [454, ${y_start + 210}, ${x_y_crops[0]},  -14, -57]
            [494, ${y_start + 210}, ${x_y_crops[1]},  -53, -30]
            [620, ${y_start + 210}, ${x_y_crops[2]},  -49, -28]
            [762, ${y_start + 210}, ${x_y_crops[3]},   -4,  -4]
        }
        spriteset(${vehicle.id}_ss_load_3_${state}, "src/graphics/${vehicle.id}.png") {
            [20,  ${y_start + 310}, ${x_y_crops[0]},  -13, -29]
            [60,  ${y_start + 310}, ${x_y_crops[1]}, -102,  -8]
            [186, ${y_start + 310}, ${x_y_crops[2]},  -84, -28]
            [328, ${y_start + 310}, ${x_y_crops[3]},  -48, -26]
            [454, ${y_start + 310}, ${x_y_crops[0]},  -14, -47]
            [494, ${y_start + 310}, ${x_y_crops[1]},  -60, -25]
            [620, ${y_start + 310}, ${x_y_crops[2]},  -50, -28]
            [762, ${y_start + 310}, ${x_y_crops[3]},   -7,  -6]
        }
        spriteset(${vehicle.id}_ss_load_4_${state}, "src/graphics/${vehicle.id}.png") {
            [20,  ${y_start + 410}, ${x_y_crops[0]},  -13, -35]
            [60,  ${y_start + 410}, ${x_y_crops[1]},  -97, -10]
            [186, ${y_start + 410}, ${x_y_crops[2]},  -69, -28]
            [328, ${y_start + 410}, ${x_y_crops[3]},  -45, -22]
            [454, ${y_start + 410}, ${x_y_crops[0]},  -14, -45]
            [494, ${y_start + 410}, ${x_y_crops[1]},  -66, -22]
            [620, ${y_start + 410}, ${x_y_crops[2]},  -61, -28]
            [762, ${y_start + 410}, ${x_y_crops[3]},  -15, -10]
        }
        spriteset(${vehicle.id}_ss_load_5_${state}, "src/graphics/${vehicle.id}.png") {
            [20,  ${y_start + 510}, ${x_y_crops[0]},  -13, -41]
            [60,  ${y_start + 510}, ${x_y_crops[1]},  -90, -13]
            [186, ${y_start + 510}, ${x_y_crops[2]},  -65, -28]
            [328, ${y_start + 510}, ${x_y_crops[3]},  -40, -19]
            [454, ${y_start + 510}, ${x_y_crops[0]},  -14, -42]
            [494, ${y_start + 510}, ${x_y_crops[1]},  -75, -17]
            [620, ${y_start + 510}, ${x_y_crops[2]},  -68, -28]
            [762, ${y_start + 510}, ${x_y_crops[3]},  -22, -13]
        }
    </tal:build_state>
</tal:build_graphics>

spritegroup ${vehicle.id}_sg_refit_1_moving {
    loaded:  [
        ${vehicle.id}_ss_not_loaded_moving,
        ${vehicle.id}_ss_load_1_moving,
        ${vehicle.id}_ss_load_2_moving,
        ${vehicle.id}_ss_load_3_moving,
        ${vehicle.id}_ss_load_4_moving,
        ${vehicle.id}_ss_load_5_moving,
    ];
    loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
        ${vehicle.id}_ss_not_loaded_moving,
    ];
}

spritegroup ${vehicle.id}_sg_refit_1_not_moving {
    loaded:  [
        ${vehicle.id}_ss_not_loaded_not_moving,
        ${vehicle.id}_ss_load_1_not_moving,
        ${vehicle.id}_ss_load_2_not_moving,
        ${vehicle.id}_ss_load_3_not_moving,
        ${vehicle.id}_ss_load_4_not_moving,
        ${vehicle.id}_ss_load_5_not_moving,
    ];
    loading: [
        ${vehicle.id}_ss_not_loaded_not_moving,
        ${vehicle.id}_ss_load_1_not_moving,
        ${vehicle.id}_ss_load_2_not_moving,
        ${vehicle.id}_ss_load_3_not_moving,
        ${vehicle.id}_ss_load_4_not_moving,
        ${vehicle.id}_ss_load_5_not_moving,
    ];
}

switch (FEAT_SHIPS, SELF, ${vehicle.id}_switch_graphics_refit_1, current_speed) {
    0: return ${vehicle.id}_sg_refit_1_not_moving;
    return ${vehicle.id}_sg_refit_1_moving;
}

switch (FEAT_SHIPS, SELF, ${vehicle.id}_switch_graphics, 0) {
    0: return ${vehicle.id}_switch_graphics_refit_1;
    return ${vehicle.id}_switch_graphics_refit_1;
}


// -- capacity varies according to subtype refit -- //
switch (FEAT_SHIPS, SELF, ${vehicle.id}_switch_cargo_capacity, cargo_classes) {
    bitmask(CC_PASSENGERS): return ${vehicle.capacity_pax};
    bitmask(CC_MAIL): return ${vehicle.capacity_mail};
    return ${vehicle.capacity_freight};
}


//!! consider how this handles variable capacity by refit
// -- set speed a little higher than rated speed when unladen -- //
switch (FEAT_SHIPS, SELF, ${vehicle.id}_switch_speed_varies_with_load_amount, cargo_count*100/cargo_capacity) {
    0 : ${vehicle.get_speeds_adjusted_for_load_amount()[0]};
    1..25 : ${vehicle.get_speeds_adjusted_for_load_amount()[1]};
    26..50 : ${vehicle.get_speeds_adjusted_for_load_amount()[2]};
    51..75 : ${vehicle.get_speeds_adjusted_for_load_amount()[3]};
    76..100 : ${vehicle.get_speeds_adjusted_for_load_amount()[4]};
    return 0; // should never reach this result, make it show up as a problem
}

// -- handle refit subtype strings, used by this vehicle to vary capacity -- //
switch (FEAT_SHIPS, SELF, ${vehicle.id}_switch_cargo_subtype_text, cargo_subtype) {
    0: return string(STR_LOG_TUG_REFIT_SUBTYPE_0);
    1: return string(STR_LOG_TUG_REFIT_SUBTYPE_1);
    2: return string(STR_LOG_TUG_REFIT_SUBTYPE_2);
    return CB_RESULT_NO_TEXT;
}


// -- print some of the vehicle non-nml properties to aid debugging -- //
// [no properties printed]

item(FEAT_SHIPS, ${vehicle.id}, ${vehicle.numeric_id}) {
    property {
        name:                           string(STR_NAME_${vehicle.id});
        climates_available:             ALL_CLIMATES; // nml constant
        sound_effect:                   ${('SOUND_SHIP_HORN','SOUND_FERRY_HORN')[vehicle.default_cargo=='PASS']};
        <!--! visual_effect:                  visual_effect(VISUAL_EFFECT_DIESEL, ${vehicle.smoke_offset}); // nml constant for DIESEL-->
        introduction_date:              date(${vehicle.intro_date},01,01); // config just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 ${vehicle.get_default_cargo_capacity()};
        sprite_id:                      SPRITE_ID_NEW_ROADVEH; //enable new graphics - nml constant
        speed:                          ${vehicle.speed}mph;
        ocean_speed_fraction:           ${vehicle.get_ocean_speed()};
        canal_speed_fraction:           ${vehicle.get_canal_speed()};
        cost_factor:                    ${vehicle.buy_cost};
        running_cost_factor:            ${vehicle.get_running_cost()};
        refit_cost:                     0;
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask();
        non_refittable_cargo_classes:   bitmask();
        cargo_allow_refit:              [WOOD];
        cargo_disallow_refit:           [];
        default_cargo_type:             ${vehicle.default_cargo};
        loading_speed:                  ${vehicle.loading_speed};
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     ${vehicle.get_adjusted_model_life()};
        retire_early:                   ${vehicle.vehicle_life - 4}; // magic from Eddi
        vehicle_life:                   ${vehicle.vehicle_life};
    }
    graphics {
        //speed:                          ${vehicle.id}_switch_speed_varies_with_load_amount;
        //purchase_speed:                 ${vehicle.get_speeds_adjusted_for_load_amount()[4]};
        //cargo_capacity:                 ${vehicle.id}_switch_cargo_capacity;
        //purchase_cargo_capacity:        ${vehicle.get_default_cargo_capacity()};
        additional_text:                string(STR_LOG_TUG_BUY_MENU, ${vehicle.get_buy_menu_string()});
        cargo_subtype_text:             ${vehicle.id}_switch_cargo_subtype_text;
        //refit_cost:                     ${vehicle.id}_switch_refit_cost;
        default:                        ${vehicle.id}_switch_graphics;
        //purchase:                       ${vehicle.id}_sg_purchase;
    }
}

// -- end ${vehicle.title} -- <!--! another comment to aid reading the final nml  -->
