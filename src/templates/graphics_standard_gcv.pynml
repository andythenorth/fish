// handle graphics

template spriteset_template_${vehicle.id}(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          ${vehicle.offsets[0][0]}, ${vehicle.offsets[0][1]}]
    [60,        y,          113,        66,          ${vehicle.offsets[1][0]}, ${vehicle.offsets[1][1]}]
    [186,       y,          138,        48,          ${vehicle.offsets[2][0]}, ${vehicle.offsets[2][1]}]
    [328,       y,          113,        66,          ${vehicle.offsets[3][0]}, ${vehicle.offsets[3][1]}]
    [454,       y,          28,         89,          ${vehicle.offsets[4][0]}, ${vehicle.offsets[4][1]}]
    [494,       y,          113,        66,          ${vehicle.offsets[5][0]}, ${vehicle.offsets[5][1]}]
    [620,       y,          138,        48,          ${vehicle.offsets[6][0]}, ${vehicle.offsets[6][1]}]
    [762,       y,          113,        66,          ${vehicle.offsets[7][0]}, ${vehicle.offsets[7][1]}]
}

<tal:sprites_random_variations repeat="variation_num python:range(len(vehicle.graphic_variations_by_date[0]))">
    spriteset(${vehicle.id}_ss_not_loaded_not_moving_${variation_num}, "src/graphics/${vehicle.id}_${variation_num}.png") {
      spriteset_template_${vehicle.id}(10)
    }
    spriteset(${vehicle.id}_ss_not_loaded_moving_${variation_num}, "src/graphics/${vehicle.id}_${variation_num}.png") {
      spriteset_template_${vehicle.id}(110)
    }
    spriteset(${vehicle.id}_ss_loading_0_${variation_num}, "src/graphics/${vehicle.id}_${variation_num}.png") {
      spriteset_template_${vehicle.id}(210)
    }
    spriteset(${vehicle.id}_ss_loading_1_${variation_num}, "src/graphics/${vehicle.id}_${variation_num}.png") {
      spriteset_template_${vehicle.id}(310)
    }
    spriteset(${vehicle.id}_ss_loading_2_${variation_num}, "src/graphics/${vehicle.id}_${variation_num}.png") {
      spriteset_template_${vehicle.id}(410)
    }
    spriteset(${vehicle.id}_ss_loading_3_${variation_num}, "src/graphics/${vehicle.id}_${variation_num}.png") {
      spriteset_template_${vehicle.id}(510)
    }
    spriteset(${vehicle.id}_ss_loaded_not_moving_${variation_num}, "src/graphics/${vehicle.id}_${variation_num}.png") {
      spriteset_template_${vehicle.id}(610)
    }
    spriteset(${vehicle.id}_ss_loaded_moving_${variation_num}, "src/graphics/${vehicle.id}_${variation_num}.png") {
      spriteset_template_${vehicle.id}(710)
    }

    spritegroup ${vehicle.id}_sg_moving_${variation_num} {
        loaded:  [
            ${vehicle.id}_ss_not_loaded_moving_${variation_num},
            ${vehicle.id}_ss_loaded_moving_${variation_num},
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            ${vehicle.id}_ss_loaded_moving_${variation_num},
        ];
    }

    spritegroup ${vehicle.id}_sg_not_moving_${variation_num} {
        loaded:  [
            ${vehicle.id}_ss_not_loaded_not_moving_${variation_num},
            ${vehicle.id}_ss_loaded_not_moving_${variation_num},
        ];
        loading: [
            ${vehicle.id}_ss_loading_0_${variation_num},
            ${vehicle.id}_ss_loading_1_${variation_num},
            ${vehicle.id}_ss_loading_2_${variation_num},
            ${vehicle.id}_ss_loading_3_${variation_num},
        ];
    }

    switch (FEAT_SHIPS, SELF, ${vehicle.id}_switch_graphics_${variation_num}, current_speed) {
        0: return ${vehicle.id}_sg_not_moving_${variation_num};
        return ${vehicle.id}_sg_moving_${variation_num};
    }
</tal:sprites_random_variations>

random_switch (FEAT_SHIPS, SELF, ${vehicle.id}_switch_graphics) {
    <tal:switch_random_graphics repeat="variation_num python:range(len(vehicle.graphic_variations_by_date[0]))">
        1: return ${vehicle.id}_switch_graphics_${variation_num};
    </tal:switch_random_graphics>
}


// buy menu graphics

template spriteset_template_purchase_${vehicle.id}() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [${vehicle.buy_menu_bb_xy[0]}, ${vehicle.buy_menu_bb_xy[1]}, ${vehicle.buy_menu_width}, 22, -${vehicle.buy_menu_width / 2}, -10]
}

spriteset(${vehicle.id}_ss_purchase, "src/graphics/${vehicle.id}_0.png") {
  spriteset_template_purchase_${vehicle.id}()
}

spritegroup ${vehicle.id}_sg_purchase {
    loaded:  [
        ${vehicle.id}_ss_purchase,
    ];
    loading: [
        ${vehicle.id}_ss_purchase,
    ];
}

// handle autorefit (and associated subtype strings)
<tal:include define="autorefit_any load: autorefit_any.pynml" metal:use-macro="autorefit_any" />
